<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.2" xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    <!--
        JPA 설정하기 - persistence.xml
        - JPA 설정 파일
        - /META-INF/persistence.xml 위치
        - persistence-unit name으로 이름 지정
        - javax(JDK 8 ~ 11) , jakarta.persistence로 시작 : JPA 표준 속성
        - hibernate로 시작 : 하이버네이트 전용 속성
    -->
    <!--
        데이터베이스 방언

        - JPA는 특정 데이터베이스에 종속 X
        - 각각의 데이터베이스가 제공하는 SQL 문법과 함수는 조금씩 다름
            - 가변 문자 : MySQL은 VARCHAR, Oracle은 VARCHAR2
            - 문자열을 자르는 함수 : SQL 표준은 SUBSTRING(), Oracle은 SUBSTR()
            - 페이징 : MySQL은 LIMIT , Oracle은 ROWNUM
        - 방언 : SQL 표준을 지키지 않은 특정 데이터베이스만의 고유한 기능


    -->
    <persistence-unit name="hello">
        <properties>
            <!-- 필수 속성 -->
            <property name="jakarta.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password" value=""/>
            <property name="jakarta.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test"/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>

            <!-- 옵션 -->
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments"  value="true"/>
            <property name="hibernate.jdbc.batch_size" value="10"/> <!-- 설정 시 사이즈만큼 모아서 DB에 한꺼번에 쿼리를 보내고 DB를 커밋한다.(버퍼링 기능)  -->
            <property name="hibernate.hbm2ddl.auto" value="create" /><!--기존 테이블 삭제 후 다시 생성 (DROP + CREATE)-->
            <!--<property name="hibernate.hbm2ddl.auto" value="create-drop" />--><!--create와 같으나 종료 시점에 테이블 DROP-->
            <!--<property name="hibernate.hbm2ddl.auto" value="update" />--><!--변경분만 반영 (운영DB에는 사용하면 안됨)-->
            <!--<property name="hibernate.hbm2ddl.auto" value="validate" />--><!--엔티티와 테이블이 정상 매핑되었는지만 확인-->
            <!--<property name="hibernate.hbm2ddl.auto" value="none" />--><!--사용하지 않음-->
        </properties>
    </persistence-unit>
    <!--
   -> hibernate.dialect 속성에 지정
    • H2 : org.hibernate.dialect.H2Dialect
    • Oracle 10g : org.hibernate.dialect.Oracle10gDialect
    • MySQL : org.hibernate.dialect.MySQL5InnoDBDialect
    • 하이버네이트는 40가지 이상의 데이터베이스 방언 지원

    -->
    <!--
    [ 데이터베이스 스키마 자동 생성 ]
    - DDL을 애플리케이션 실행 시점에 자동 생성
    - 테이블 중심 -> 객체 중심
    - 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL 생성
    - 이렇게 생성된 DDL은 개발 장비에서만 사용 !!!!!!!!!!!!!!!!!!
    - 생성된 DDL은 운영 서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

    [ 데이터베이스 스키마 자동 생성 -주의 ]
    - 운영 장비에는 절대 create, create-drop , update 사용하면 안된다.
    - 개발 초기 단계는 create 또는 update
    - 테스트 서버는 update 또는 validate
    - 스테이징과 운영 서버는 validate 또는 none
    -->



</persistence>
